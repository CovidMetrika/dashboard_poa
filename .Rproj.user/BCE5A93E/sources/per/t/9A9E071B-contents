library(shiny)
library(tidyverse)
library(sf)
library(stringr)
library(readxl)
library(leaflet)
library(RColorBrewer)
library(DT)
library(leafpop)
library(readxl)
library(rgeos) #https://statistique-et-logiciel-r.com/premiers-pas-en-cartographie-avec-r/
library(viridis)
library(rainbow)
library(httr)
library(curl)
library(abjutils)
library(shinydashboard)
library(plotly)
library(scales)
library(shinydashboardPlus)

####
# Leitura banco de dados
####

# dados espaciais

# lendo shapefiles RS

mapa_rs_shp <- sf::st_read("dados/shapefiles/43MUE250GC_SIR.shp", quiet = TRUE) %>%
  mutate(municipio = str_to_title(NM_MUNICIP))

mapa_rs_shp[mapa_rs_shp$municipio=="Westfalia","municipio"] <- "Westfália"
mapa_rs_shp[mapa_rs_shp$municipio=="Vespasiano Correa","municipio"] <- "Vespasiano Corrêa"

# lendo dados para fazer o join

dados_join <- read_csv("dados/equipamentos/dados_join.csv") %>%
  mutate(codigo = factor(codigo, levels = levels(mapa_rs_shp$CD_GEOCMU)))

dados_mapa_rs <- mapa_rs_shp %>%
  left_join(dados_join, by = c("CD_GEOCMU" = "codigo"))


# dados covid

dados_covid_rs <- read_csv("dados/covid/covid_rs.csv")


####
# Funções criadas
####

# criando função personalizada para a caixa do usuário 

widgetUserBoxx <- function (..., title = NULL, subtitle = NULL, type = NULL, background = FALSE, 
                            backgroundUrl = NULL, src = NULL, color = NULL, footer = NULL, 
                            footer_padding = TRUE, width = 6, height = NULL, boxToolSize = "sm", 
                            collapsible = TRUE, closable = FALSE) 
{
  cl <- "widget-user-header"
  if (!is.null(color) && background == FALSE) 
    cl <- paste0(cl, " bg-", color)
  if (isTRUE(background)) 
    cl <- paste0(cl, " bg-black")
  boxCl <- "box box-widget widget-user"
  if (!is.null(type)) 
    boxCl <- paste0(boxCl, "-", type)
  style <- NULL
  if (!is.null(height)) {
    style <- paste0("height: ", shiny::validateCssUnit(height))
  }
  backgroundStyle <- NULL
  if (isTRUE(background)) {
    backgroundStyle <- paste0("background: url('", 
                              backgroundUrl, "') center center;")
  }
  shiny::column(width = width, shiny::tags$div(class = boxCl, 
                                               style = style, shiny::tags$div(class = cl, style = backgroundStyle, 
                                                                              shiny::tags$div(class = "pull-right box-tools", 
                                                                                              if (collapsible) {
                                                                                                shiny::tags$button(class = paste0("btn", 
                                                                                                                                  " bg-", color, " btn-", boxToolSize), 
                                                                                                                   `data-widget` = "collapse", type = "button", 
                                                                                                                   shiny::tags$i(class = "fa fa-minus"))
                                                                                              }, if (closable) {
                                                                                                shiny::tags$button(class = paste0("btn", 
                                                                                                                                  " bg-", color, " btn-", boxToolSize), 
                                                                                                                   `data-widget` = "remove", type = "button", 
                                                                                                                   shiny::tags$i(class = "fa fa-times"))
                                                                                              }), 
                                                                              shiny::tags$h3(class = "widget-user-username",
                                                                                             title), shiny::tags$h5(class = "widget-user-desc",
                                                                                                                    subtitle)), shiny::tags$div(class = "box-body", 
                                                                                                                                                ...), shiny::tags$div(class = if (isTRUE(footer_padding)) 
                                                                                                                                                  "box-footer"
                                                                                                                                                  else "box-footer no-padding", footer)))
}

##############################################################################################
# Aplicativo
##############################################################################################


header <- dashboardHeader(
  title = "Dados COVID19 no Rio Grande do Sul",
  titleWidth = 500
)

sidebar <- dashboardSidebar(
  sidebarMenu(
    menuItem("Mapa COVID-19 RS", tabName = "mapa_covid_rs"),
    menuItem("Mapa Saúde RS", tabName = "mapa_saude_rs"),
    menuItem("Sobre o app", tabName = "sobre")
  ),
  width = 180
)


body <- dashboardBody(
  tabItems(
    tabItem("mapa_covid_rs",
            fluidPage(
              titlePanel(
                div(column(width = 6, h1("Mapa com dados do Rio Grande do Sul")
                    ),
                    column(width = 6, 
                           tags$img(src = "ufrgs_logo.png", height = "100", width = "130"),
                           tags$img(src = "logo_ime2.png", height = "100", width = "400")))
              ),
              fluidRow(
                valueBoxOutput("box_conf", width = 3),
                valueBoxOutput("box_inci", width = 3),
                valueBoxOutput("box_obit", width = 3),
                valueBoxOutput("box_leta", width = 3)
              ),
              fluidRow(
                column(
                  width = 9,
                  h3("Selecione a variável de interesse para o dashboard"),
                  radioButtons("var_dashboard",
                               label = NULL,
                               choices = list("Confirmados" = "confirmed","Confirmados por 100 mil habitantes" = "confirmed_per_100k_inhabitants","Óbitos" = "deaths"),
                               selected = "confirmed",
                               inline = T),
                  mainPanel(
                    leafletOutput("mapa_rs", height = "500px"),
                    HTML("<br><br><br>"), # para dar um espaço entre os gráficos
                    width = 12
                  )
                ),
                column(
                  width = 3,
                  box(
                    background = "red",
                    dataTableOutput("table_munic", height = "580px"),
                    width = 12
                  )
                )
              ),
              fluidRow(
                box(
                  width = 6,
                  title = "Série histórica do número de casos",
                  background = "red",
                  plotlyOutput("serie_casos", height = "450px")
                ),
                box(
                  width = 6,
                  title = "Série histórica do número de óbitos",
                  background = "red",
                  plotlyOutput("serie_obitos", height = "450px")
                )
              )
            )
    ),
    tabItem("sobre",
            fluidPage(
              titlePanel("Sobre o aplicativo"),
              fluidRow(
                column(
                  width = 6,
                  gradientBox(
                    title = "Fonte de dados",
                    width = 12,
                    icon = "fa fa-file",
                    gradientColor = "teal", 
                    boxToolSize = "sm", 
                    closable = F,
                    collapsible = T,
                    a(strong("Dados Covid-19 POA"), href = "https://prefeitura.poa.br/coronavirus", style = "color:black"),br(),
                    a(strong("Dados UTI"), href =  "https://docs.google.com/spreadsheets/d/e/2PACX-1vTwlPdNvBfVAYGVXKzmWxWLpQLuPwf28zVY3PhqBw5qZ6D4sppyXj5IIslEOUfBBipAyqnGTUHX-IRV/pubhtml", style = "color:black"),br(),
                    a(strong("Dados Emergências"), href = "https://docs.google.com/spreadsheets/d/1-Zea1tEJd-rJJp77Veptkrone0_hddVKgy-pW58E5iM/pubhtml#", style = "color:black"),
                    footer = "Dados são atualizados diariamente a partir das 20h"
                  )
                ),
                column(
                  width = 6, 
                  tags$img(src = "ufrgs_logo.png", height = "100", width = "130"),
                  tags$img(src = "logo_ime2.png", height = "100", width = "400"))
              ),
              widgetUserBoxx(
                title = "Gustavo Machado Utpott",
                subtitle = "Densenvolvedor do aplicativo",
                type = NULL,
                width = 6,
                src = NULL,
                color = "green",
                "Estudante de Estatística da UFRGS",
                footer = "Contato: gustavo.utpott@gmail.com"
              ),
              widgetUserBoxx(
                title = "Márcia Helena Barbian",
                subtitle = "Densenvolvedora do aplicativo",
                type = NULL,
                width = 6,
                src = NULL,
                color = "yellow",
                "Professora do Departamento de Estatística da UFRGS",
                footer = "Contato: mhbarbian@gmail.com"
              ),
              
            )
    )
  )
)

ui <- dashboardPage(header = header, sidebar = sidebar, body = body, skin = "red")

########################################################################
# Server
########################################################################


server <- function(input, output) {
  
  ###############################
  ####### first tabItem #########
  ###############################
  
  # caixas com numeros gerais
  
  # caixa de confirmados
  output$box_conf <- renderValueBox({
    aux <- dados_covid_rs %>%
      filter(is_last) %>%
      filter(place_type == "state")
    
    total <- aux$confirmed
    
    valueBox(
      total,
      "Casos confirmados",
      icon = icon("notes-medical"),
      color = "red" 
    )
  })
  # caixa incidência por 100 mil habitantes
  output$box_inci <- renderValueBox({
    aux <- dados_covid_rs %>%
      filter(is_last) %>%
      filter(place_type=="state")
    
    confirmados_por_100k <- aux$confirmed_per_100k_inhabitants
    
    valueBox(
      round(confirmados_por_100k,2),
      "Casos confirmados por 100 mil habitantes",
      icon = icon("ambulance"),
      color = "red" 
    )
  })
  # caixa de óbitos
  output$box_obit <- renderValueBox({
    aux <- dados_covid_rs %>%
      filter(is_last) %>%
      filter(place_type == "state")
    
    mortes <- aux$deaths
    
    valueBox(
      mortes,
      "Óbitos",
      icon = icon("heartbeat"),
      color = "purple", 
    )
  })
  # caixas de letalidade
  output$box_leta <- renderValueBox({
    aux <- dados_covid_rs %>%
      filter(is_last) %>%
      filter(place_type == "state") 
    
    letalidade <- aux$death_rate
    
    valueBox(
      paste0(round(letalidade*100,2),"%"),
      "Letalidade",
      icon = icon("heartbeat"),
      color = "purple", 
    )
  })
  
  #####################
  # Mapa_rs
  
  output$mapa_rs <- renderLeaflet({
    
    var <- rlang::sym(input$var_dashboard)
    
    aux_mapa <- dados_mapa_rs %>%
      mutate(var = replace_na(!!var, 0))
    
    y_quantidade <- aux_mapa$var
    
    if(input$var_dashboard == "confirmed") {
      bins <- c(0, 1, 2, 3, 10, 20, 30, 40, max(y_quantidade, na.rm=T))
      text1 <- sprintf("%s - numero de casos %s", aux_mapa$municip, round(y_quantidade, 2))
      text2 <- "Casos confirmados"
    } else if(input$var_dashboard == "deaths") {
      bins <- c(0,1,2,3,max(y_quantidade, na.rm=T))
      text1 <- sprintf("%s - numero de óbitos %s", aux_mapa$municip, round(y_quantidade, 2))
      text2 <- "Óbitos confirmados"
    } else {
      bins <- c(0,5,10,20,30,max(y_quantidade, na.rm=T))
      text1 <- sprintf("%s - casos por 100mil habitantes %s", aux_mapa$municip, round(y_quantidade, 2))
      text2 <- "Casos por 100mil habitantes"
    }
    
    pal <- colorBin("YlOrRd", domain = y_quantidade, bins = bins)
    
    leaflet(aux_mapa) %>%
      addTiles(urlTemplate = "http://mt0.google.com/vt/lyrs=m&hl=en&x={x}&y={y}&z={z}&s=Ga", attribution = 'Google') %>%
      addPolygons(fillColor = ~pal(y_quantidade), 
                  weight = 1,
                  opacity = 0.5,
                  fillOpacity = 0.7,
                  color = "gray",
                  highlight = highlightOptions(
                    weight = 5,
                    color = "#666",
                    fillOpacity = 0.7,
                    bringToFront = TRUE),
                  label = text1,
                  labelOptions = labelOptions(
                    style = list("font-weight" = "normal", padding = "6px 11px"),
                    textsize = "15px",
                    direction = "auto")) %>%
      addLegend(pal = pal, values = ~y_quantidade, opacity = 0.7, title = text2,
                labFormat = labelFormat(digits = 5),
                position = "bottomright")
  })
  
  #############
  # table_munic
  
  output$table_munic <- renderDataTable({
    
    var <- rlang::sym(input$var_dashboard)
    
    aux <- dados_covid_rs %>%
      filter(place_type == "city") %>%
      filter(is_last) %>%
      arrange(desc(!!var))
    
    texto <- ifelse(
      test = input$var_dashboard == "confirmed",
      yes = "Confirmados",
      no = ifelse(
        test = input$var_dashboard == "deaths",
        yes = "Óbitos",
        no = "Confirmados por 100mil habitantes"
      ))
    
    tabela <- datatable(
      aux[,c("municipio",input$var_dashboard)], 
      rownames=F,
      class = "compact",
      colnames = c("Município",texto),
      options = list(
        dom = "tS", 
        ordering = F,
        scrollY = "560px",
        paging = FALSE
      )
    ) %>%
      formatStyle("municipio",color = "#e0e1e2", fontSize = "12px", backgroundColor = "#222d32") %>%
      formatStyle(input$var_dashboard, color = "#dd4b39", fontWeight = "bold",fontSize = "12px", backgroundColor = "#222d32")
    
    if(input$var_dashboard == "confirmed_per_100k_inhabitants") {
      tabela <- formatRound(tabela, input$var_dashboard, digits = 2)
    }
    
    tabela
    
  })
  
  ############
  # serie_casos
  
  output$serie_casos <- renderPlotly({
    
    aux <- dados_covid_rs %>%
      filter(place_type == "city") %>%
      group_by(date) %>%
      summarise(acumulado = sum(confirmed)) %>%
      arrange(date)
    
    ordem <- as.character(format(aux$date, "%d-%m"))
    
    aux$novos <- c(aux$acumulado[1],rep(NA,nrow(aux)-1))
    for(i in 2:nrow(aux)) {
      aux$novos[i] <- aux$acumulado[i]-aux$acumulado[i-1]
    }
    
    aux$date <- as.character(format(aux$date, "%d-%m"))
    
    p <- ggplot(aux) +
      geom_line(aes(x = date, y = acumulado, group = 1)) +
      geom_point(aes(x = date, y = acumulado), size=2) +
      geom_col(aes(x = date, y = novos), fill = "#d95f02") +
      geom_text(aes(x = date, y = novos, label = novos)) +
      scale_x_discrete(limits = ordem) +
      labs(x = "Dia", y = "Casos confirmados") +
      theme(axis.text.x = element_text(angle=45,size=8, vjust = 0.5))
    
    ggplotly(p) %>%
      style(textposition = "top")
    
  })
  
  ############
  # serie_obitos
  
  output$serie_obitos <- renderPlotly({
    
    aux <- dados_covid_rs %>%
      filter(place_type == "city") %>%
      group_by(date) %>%
      summarise(acumulado = sum(deaths)) %>%
      arrange(date)
    
    ordem <- as.character(format(aux$date, "%d-%m"))
    
    aux$novos <- c(aux$acumulado[1],rep(NA,nrow(aux)-1))
    for(i in 2:nrow(aux)) {
      aux$novos[i] <- aux$acumulado[i]-aux$acumulado[i-1]
    }
    
    aux$date <- as.character(format(aux$date, "%d-%m"))
    
    p <- ggplot(aux) +
      geom_line(aes(x = date, y = acumulado, group = 1)) +
      geom_point(aes(x = date, y = acumulado), size=2) +
      geom_col(aes(x = date, y = novos), fill = "#d95f02") +
      geom_text(aes(x = date, y = novos, label = novos)) +
      scale_x_discrete(limits = ordem) +
      labs(x = "Dia", y = "Óbitos confirmados") +
      theme(axis.text.x = element_text(angle=45,size=8, vjust = 0.5))
    
    ggplotly(p) %>%
      style(textposition = "top")
    
  })
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  ## gráfico de barras com casos por municipio
  #
  output$barras_municipios <- renderPlotly({
    
    aux <- dados_covid_rs %>%
      filter(data == max(dados_covid_rs$date)) %>%
      arrange(casos)
    
    ordem <- aux$municipio
    
    p <- ggplot(aux, aes(x = municipio, y = casos)) +
      geom_col(fill = "red") +
      labs(x = "Município", y = "Total de casos confirmados") +
      scale_x_discrete(limits = ordem) +
#      axis.text.x = element_text(angle=90,size=7, vjust = 0.5)
      coord_flip()
    
    ggplotly(p)
    
  })
  
  
  output$serie_casos_rs_mesorregiao <- renderPlotly({
    
    aux <- dados_mapa_rs %>%
      filter(data == max(dados_covid_rs$date)) %>%
      group_by(mesorregiao)%>%
      summarise(casos = sum(casos))%>%
      arrange(casos)
    
    ordem <- aux$mesorregiao
    
    
    p <- ggplot(aux, aes(x = mesorregiao, y = casos)) +
      geom_col(fill = "red") +
      labs(y = "Total de casos confirmados") +
      scale_x_discrete(limits = ordem) +
      #      axis.text.x = element_text(angle=90,size=7, vjust = 0.5)
      coord_flip()
    
    ggplotly(p)
    
  })
  
  
  
  output$barras_mesorregiao_leitos_internacao <- renderPlotly({
    
    aux <- data.frame(mesorregiao= dados_mapa_rs$mesorregiao, leitos_internacao= dados_mapa_rs$leitos_internacao) %>%
      group_by(mesorregiao)%>%
      summarise(leitos_internacao = sum(leitos_internacao))%>%
      arrange(leitos_internacao)
    
    ordem <- aux$mesorregiao
    
    p <- ggplot(aux, aes(x = mesorregiao, y = leitos_internacao)) +
      geom_col(fill = "Sky blue") +
      labs(y = "Número de leitos de internação hospitalar por mesorregião") +
      scale_x_discrete(limits = ordem) +
      #axis.title.y = element_blank()+
      coord_flip()
    
    ggplotly(p)
    
  })
  
  ## Gráfico de barras com novos casos por dia
  #
  
  output$novos_casos <- renderPlotly({
    
    aux <- dados_covid_rs %>%
      group_by(data) %>%
      summarise(acumulado = sum(casos))
    
    aux$novos <- c(aux$acumulado[1],rep(NA,nrow(aux)-1))
    for(i in 2:nrow(aux)) {
      aux$novos[i] <- aux$acumulado[i]-aux$acumulado[i-1]
    }
    
    aux$data <- as.Date(aux$data, format = "%d-%m-%Y")
    aux$data <- str_c(lubridate::day(aux$data),"-",lubridate::month(aux$data))
    
    p <- ggplot(aux, aes(x = data, y = novos)) +
      geom_col(fill = "red") +
      #geom_line(aes(x = data, y = acumulado), size=5)
      labs(x = "Dia", y = "Casos novos por dia no Rio Grande do Sul")+
      theme( axis.text.x = element_text(angle=90))
    
    ggplotly(p)
    
    
  })   
  
  output$serie_casos_rs <- renderPlotly({
    
    aux <- dados_covid_rs %>%
      group_by(data) %>%
      summarise(acumulado = sum(casos))
    
    aux$novos <- c(aux$acumulado[1],rep(NA,nrow(aux)-1))
    for(i in 2:nrow(aux)) {
      aux$novos[i] <- aux$acumulado[i]-aux$acumulado[i-1]
    }
    
    aux$data <- as.Date(aux$data, format = "%d-%m-%Y")
    aux$data <- str_c(lubridate::day(aux$data),"-",lubridate::month(aux$data))
    
    p <- ggplot(aux) +
      #geom_line(aes(x = data, y = acumulado), size=2)+
      geom_col(aes(x = data, y = acumulado), fill="red") +
      labs(x = "Dia", y = "Número de casos no Rio Grande do Sul")+
      theme( axis.text.x = element_text(angle=90))
      
    ggplotly(p)
    
    
  }) 
  
  
  output$serie_casos_rs_total_dia <- renderPlotly({
    
    aux <- dados_covid_rs %>%
      group_by(data) %>%
      summarise(acumulado = sum(casos))
    
    aux$novos <- c(aux$acumulado[1],rep(NA,nrow(aux)-1))
    for(i in 2:nrow(aux)) {
      aux$novos[i] <- aux$acumulado[i]-aux$acumulado[i-1]
    }
    
    #format(as.Date(dados_covid_rs$data, format = "%d-%m-%Y"), "%d-%m-%Y")
    
    aux$data <- as.Date(aux$data, format = "%d-%m-%Y")
    #aux$data2 <- str_c(lubridate::day(aux$data),"-",lubridate::month(aux$data))
    
    p <- ggplot(aux) +
      #geom_line(aes(x = data, y = acumulado), size=2)+
      geom_line(aes(x = data, y = acumulado)) +
      geom_point(aes(x = data, y= acumulado), size=2)+
      geom_bar(aes(x= data, y = novos), fill = "red", stat = "identity")+
      labs(x = "Dia", y = "Número de casos no Rio Grande do Sul")+
      theme( axis.text.x = element_text(angle=90,size=7, vjust = 0.5))
    
    ggplotly(p)
    
    
  })
  
  
  
  output$grafico_serie_proporcao <- renderPlotly({
    
    dados_covid_rs$data <- as.Date(dados_covid_rs$data,format = "%d-%m-%Y") 
    
    serie2 <- dados_covid_rs %>%
      filter(municipio %in% input$cidade1) 
    
    
    ggplotly(
      ggplot(serie2, aes(x = data , y = casos, colour = `municipio`)) +
        geom_line(size = 1) +
        geom_point(size = 2)+
        ylim(input$limite1[1],c(input$limite1[2]))+
        labs(x = "dia", y = "Numero de casos confirmados")+
        theme( axis.text.x = element_text(angle=90))+
        scale_x_date(labels = date_format("%d-%m"))
    )
    
  })
  
  
  output$grafico_mapa_proporcao <- renderLeaflet({
    
    dados_mapa_rs_tudo = dados_mapa_rs %>%  # aqui coloca o filtro 
      filter(data == input$y | is.na(data)) %>%
      group_by(municipio) %>%
      mutate(data==input$y)%>%
      summarise(casos=max(casos))
    
    ## banco filtrado pra fazer o grafico
    dados_mapa_rs_filtro = dados_mapa_rs %>%
                                  filter(data == input$y)
    
    ####################################################    
    y_quantidade=dados_mapa_rs_tudo$casos
    bins <- c(0, 1, 2, 3, 10, 20, 30, 40, max(y_quantidade))
    #bins = c(1, 100)
    #pal <- colorBin("magma", domain = y, bins = bins)
    #pal <- colorBin("white", domain = y)
    pal <- colorBin("YlOrRd", domain = y_quantidade, bins = bins)
    
    
    leaflet(dados_mapa_rs_tudo) %>%
      addProviderTiles(providers$OpenStreetMap.Mapnik) %>%
      addCircleMarkers(data=dados_mapa_rs_filtro, lng=dados_mapa_rs_filtro$longitude, 
                       lat = dados_mapa_rs_filtro$latitude, radius=~dados_mapa_rs_filtro$casos, 
                       weight = 1, color = "red", fillOpacity = 0.5)%>%
      addPolygons(fillColor = ~pal(y_quantidade), 
                  weight = 1,
                  opacity = 0.5,
                  fillOpacity = 0.5,
                  color = "gray",
                  highlight = highlightOptions(
                    weight = 5,
                    color = "#666",
                    fillOpacity = 0.7,
                    bringToFront = TRUE),
                  label = sprintf("%s - numero de casos %s", dados_mapa_rs_tudo$municipio, round(y_quantidade, 6)),
                  labelOptions = labelOptions(
                    style = list("font-weight" = "normal", padding = "6px 11px"),
                    textsize = "15px",
                    direction = "auto")) %>%
      addLegend(pal = pal, values = ~y_quantidade, opacity = 0.7, title = "casos confirmados",
                labFormat = labelFormat(digits = 5),
                position = "bottomright") #%>%
   
    #popup=~dados_mapa_rs_filtro$casos)# %>%
    #addLegendCustom(colors = c("red"), labels = c("casos confirmados"), sizes = c(5))
  })
  
  ######
  
  output$grafico_mapa_leitos <- renderLeaflet({
    
    # banco filtro leitos
    #aux_nome2 = input$tipo_leito
    #aux_aux_nome2 = which(ax_nome2==names(dados_mapa_rs))
    #nomes_filtro= c(municipio,input$tipo_leito )
    #data[,names(data) %in% input$show_vars]
    
    #dados_mapa_rs[, c(municipio,input$tipo_leito)]
    
    aux_nome_leito = which(input$tipo_leito ==names(dados_mapa_rs))  
    
    dados_mapa_rs_leitos = dados_mapa_rs %>%  # aqui coloca o filtro
      group_by(municipio) %>%
      summarize_at(colnames(dados_mapa_rs)[aux_nome_leito], funs(max))
      #summarize_at(vars(starts_with(input$tipo_leito)), leito_escolhido = funs(max))
    

    ## banco filtrado casos
    dados_mapa_rs_calendario_filtro = dados_mapa_rs %>%
        filter(data == input$calendario)
      
    ####################################################    
    y_quantidade_leitos=data.frame(dados_mapa_rs_leitos)[,2]
    bins <- c(0, 10, 20, 30, 50, 100, 300)
    #bins = c(1, 100)
    #pal <- colorBin("magma", domain = y, bins = bins)
    #pal <- colorBin("white", domain = y)
    # pal <- colorBin("Blues", domain = y_quantidade_leitos, bins = 5)
    pal <- colorBin("Blues", domain = y_quantidade_leitos, bins = bins)                                                   

    leaflet(dados_mapa_rs_leitos) %>%
      addProviderTiles(providers$OpenStreetMap.Mapnik) %>%
      addCircleMarkers(dados_mapa_rs_calendario_filtro, lng=  dados_mapa_rs_calendario_filtro$longitude, 
                       lat =   dados_mapa_rs_calendario_filtro$latitude, radius=~dados_mapa_rs_calendario_filtro$casos, 
                       weight = 1, color = "red", fillOpacity = 2)%>%
       addLegend(colors=rep("red"), labels=c("casos confirmados"))%>%
      addPolygons(fillColor = ~pal(y_quantidade_leitos), 
                  weight = 1,
                  opacity = 0.6,
                  fillOpacity = 0.6,
                  color = "gray",
                  highlight = highlightOptions(
                    weight = 5,
                    color = "#666",
                    fillOpacity = 0.7,
                    bringToFront = TRUE),
                  label = sprintf("%s - numero leitos %s", dados_mapa_rs_leitos$municipio, round(y_quantidade_leitos, 6)),
                  labelOptions = labelOptions(
                    style = list("font-weight" = "normal", padding = "6px 11px"),
                    textsize = "15px",
                    direction = "auto")) %>%
      addLegend(pal = pal, values = ~y_quantidade_leitos, opacity = 0.9,
                title = input$tipo_leito,
                labFormat = labelFormat(digits = 5),
                position = "bottomright") 
  })
  
  output$grafico_mapa_equipamentos <- renderLeaflet({
    
    dados_mapa_rs_equipamentos = dados_mapa_rs %>%  # aqui coloca o filtro 
      filter(data == input$y_data_equipamento| is.na(data)) %>%
      group_by(municipio) %>%
      #mutate(data=="20-3-2020")
      mutate(data==input$y)%>%
      summarise(equipamentos=max(manuntecao_vida_equipamentos))
    
    ## banco filtrado pra fazer o grafico
    dados_mapa_rs_filtro = dados_mapa_rs %>%
      filter(data == input$y_data_equipamento)
    
    ####################################################    
    y_quantidade=dados_mapa_rs_equipamentos$equipamentos
    bins <- c(0, 10, 50, 100, 1000, 2000, 3000, max(y_quantidade))
    #bins = c(1, 100)
    #pal <- colorBin("magma", domain = y, bins = bins)
    #pal <- colorBin("white", domain = y)
    pal <- colorBin("Blues", domain = y_quantidade, bins = bins)
    
    
    leaflet(dados_mapa_rs_equipamentos) %>%
      addProviderTiles(providers$OpenStreetMap.Mapnik) %>%
      addCircleMarkers(data=dados_mapa_rs_filtro, lng=dados_mapa_rs_filtro$longitude, 
                       lat = dados_mapa_rs_filtro$latitude, radius=~(dados_mapa_rs_filtro$casos)*2, 
                       weight = 1, color = "red", fillOpacity = 300)%>%
      addLegend(colors=rep("red"), labels=c("casos confirmados"))%>%
      addPolygons(fillColor = ~pal(y_quantidade), 
                  weight = 1,
                  opacity = 0.6,
                  fillOpacity = 0.6,
                  color = "gray",
                  highlight = highlightOptions(
                    weight = 5,
                    color = "#666",
                    fillOpacity = 0.7,
                    bringToFront = TRUE),
                  label = sprintf("%s - numero equipamentos %s", dados_mapa_rs_equipamentos$municipio, round(y_quantidade, 6)),
                  labelOptions = labelOptions(
                    style = list("font-weight" = "normal", padding = "6px 11px"),
                    textsize = "15px",
                    direction = "auto")) %>%
      addLegend(pal = pal, values = ~y_quantidade, opacity = 0.7, title = "quantidade de equipamentos",
                labFormat = labelFormat(digits = 5),
                position = "bottomright") #%>%
    
    #popup=~dados_mapa_rs_filtro$casos)# %>%
    #addLegendCustom(colors = c("red"), labels = c("casos confirmados"), sizes = c(5))
  })
  
  
   
  output$tabela <- renderDT(dados_covid_rs)
  
  output$tabela_leitos <- renderDT(leitos_rs)
  
  output$tabela_equipamentos <- renderDT(equipamentos_manutencao_vida_rs)
  
  output$tabela_leitos_internacao <- renderDT(leitos_internacao)
  
  output$mapa_leitos_internacao <- renderDT(leitos_internacao)
  
  output$box_leitos_internacao <- renderValueBox({
    
    aux = sum(dados_mapa_rs$leitos_internacao)
          
    valueBox(
      aux,
      "Número de leitos de internacao hospitalar no Rio Grande do Sul",
      icon = icon("notes-medical"),
      color = "light-blue" 
    )
  })
  
  # caixa de confirmados
  output$box_conf2 <- renderValueBox({
    aux <- dados_covid_rs %>%
      filter(data == max(dados_covid_rs$date))
    
    total <- sum(aux$casos)
    
    valueBox(
      total,
      "Número de casos confirmados",
      icon = icon("notes-medical"),
      color = "red" 
    )
  })
  
  # caixa de mortes
  output$box_mort2 <- renderValueBox({
    mortes <- 1
    valueBox(
      mortes,
      "Número de mortes",
      icon = icon("heartbeat"),
      color = "purple", 
    )
  })
  
  output$barras_municipios_leitos_internacao <- renderPlotly({
    
    aux <- dados_mapa_rs %>%
      filter(leitos_internacao>150) %>%
      arrange(leitos_internacao)
    
    ordem <- aux$municipio
    
    p <- ggplot(aux, aes(x = municipio, y = leitos_internacao)) +
      geom_col(fill = "Sky blue") +
      labs(x = "Município", y = "Número de leitos de internaçao hospitalar por município") +
      scale_x_discrete(limits = ordem) +
      coord_flip()
    
    ggplotly(p)
    
  })
  
  
  output$barras_mesorregiao_leitos_internacao <- renderPlotly({
    
    aux <- data.frame(mesorregiao= dados_mapa_rs$mesorregiao, leitos_internacao= dados_mapa_rs$leitos_internacao) %>%
      group_by(mesorregiao)%>%
      summarise(leitos_internacao = sum(leitos_internacao))%>%
      arrange(leitos_internacao)
    
    ordem <- aux$mesorregiao
    
    p <- ggplot(aux, aes(x = mesorregiao, y = leitos_internacao)) +
      geom_col(fill = "Sky blue") +
      labs(y = "Número de leitos de internação hospitalar por mesorregião") +
      scale_x_discrete(limits = ordem) +
      #axis.title.y = element_blank()+
      coord_flip()
    
    ggplotly(p)
    
  })
  
  
  output$grafico_mapa_leitos_internacao <- renderLeaflet({
    
    dados_mapa_rs_leitos_internacao = dados_mapa_rs %>%  # aqui coloca o filtro 
      filter(data == input$data_leitos_internacao| is.na(data)) %>%
      group_by(municipio) %>%
      mutate(data==input$data_leitos_internacao)%>%
      summarise(leitos_internacao=max(leitos_internacao))
    
    ## banco filtrado pra fazer o grafico
    dados_mapa_rs_filtro = dados_mapa_rs %>%
      filter(data == input$data_leitos_internacao)
    
    ####################################################    
    y_quantidade=dados_mapa_rs_leitos_internacao$leitos_internacao
    bins <- c(0, 1, 10, 50, 100, 200, 500, 1000, 1300, max(y_quantidade))
    #bins = c(1, 100)
    #pal <- colorBin("magma", domain = y, bins = bins)
    #pal <- colorBin("white", domain = y)
    pal <- colorBin("Blues", domain = y_quantidade, bins = bins)
    
    
    leaflet(dados_mapa_rs_leitos_internacao) %>%
      addProviderTiles(providers$OpenStreetMap.Mapnik) %>%
      addCircleMarkers(data=dados_mapa_rs_filtro, lng=dados_mapa_rs_filtro$longitude, 
                       lat = dados_mapa_rs_filtro$latitude, radius=~(dados_mapa_rs_filtro$casos)*2, 
                       weight = 1, color = "red", fillOpacity = 300)%>%
      addLegend(colors=rep("red"), labels=c("casos confirmados"))%>%
      addPolygons(fillColor = ~pal(y_quantidade), 
                  weight = 1,
                  opacity = 0.6,
                  fillOpacity = 0.6,
                  color = "gray",
                  highlight = highlightOptions(
                    weight = 5,
                    color = "#666",
                    fillOpacity = 0.7,
                    bringToFront = TRUE),
                  label = sprintf("%s - n. de leitos internacao  %s", dados_mapa_rs_leitos_internacao$municipio, round(y_quantidade, 6)),
                  labelOptions = labelOptions(
                    style = list("font-weight" = "normal", padding = "6px 11px"),
                    textsize = "15px",
                    direction = "auto")) %>%
      addLegend(pal = pal, values = ~y_quantidade, opacity = 0.7, title = "Qtd de leitos de internacao hospitalares",
                labFormat = labelFormat(digits = 5),
                position = "bottomright") #%>%
    
  })
  
  output$box_ventiladores <- renderValueBox({
    
    valueBox(
      sum(dados_mapa_rs$equipamentos_ventilador),
      "Número de equipamentos de ventilação mecânica no Rio Grande do Sul",
      icon = icon("notes-medical"),
      color = "light-blue" 
    )
  })
  
  
  output$box_conf3 <- renderValueBox({
    aux <- dados_covid_rs %>%
      filter(data == max(dados_covid_rs$date))
    
    total <- sum(aux$casos)
    
    valueBox(
      total,
      "Número de casos confirmados",
      icon = icon("notes-medical"),
      color = "red" 
    )
  })
  
  # caixa de mortes
  output$box_mort3 <- renderValueBox({
    mortes <- 1
    valueBox(
      mortes,
      "Número de mortes",
      icon = icon("heartbeat"),
      color = "purple", 
    )
  })
  
  
  output$barras_municipios_ventilador <- renderPlotly({
    
    aux <- dados_mapa_rs %>%
      filter(equipamentos_ventilador>9) %>%
      arrange(equipamentos_ventilador)
    
    ordem <- aux$municipio
    
    p <- ggplot(aux, aes(x = municipio, y = equipamentos_ventilador)) +
      geom_col(fill = "Sky blue") +
      labs(x = "Município", y = "Número de equipamentos de ventilação por município") +
      scale_x_discrete(limits = ordem) +
      coord_flip()
    
    ggplotly(p)
    
  })
  
  
  output$barras_mesorregiao_ventilador <- renderPlotly({
    
    aux <- data.frame(mesorregiao= dados_mapa_rs$mesorregiao, equipamentos_ventilador= dados_mapa_rs$equipamentos_ventilador) %>%
      group_by(mesorregiao)%>%
      summarise(equipamentos_ventilador = sum(equipamentos_ventilador))%>%
      arrange(equipamentos_ventilador)
    
    ordem <- aux$mesorregiao
    
    p <- ggplot(aux, aes(x = mesorregiao, y = equipamentos_ventilador)) +
      geom_col(fill = "Sky blue") +
      labs(y = "Número de equipamentos de ventilação por mesorregião") +
      scale_x_discrete(limits = ordem) +
      #axis.title.y = element_blank()+
      coord_flip()
    
    ggplotly(p)
    
  })
  
  
  output$grafico_mapa_ventilador <- renderLeaflet({
    
    dados_mapa_rs_ventilador = dados_mapa_rs %>%  # aqui coloca o filtro 
      filter(data == input$data_ventilador| is.na(data)) %>%
      group_by(municipio) %>%
      mutate(data==input$data_ventilador)%>%
      summarise(equipamentos_ventilador2=max(equipamentos_ventilador))
    
    ## banco filtrado pra fazer o grafico
    dados_mapa_rs_filtro = dados_mapa_rs %>%
      filter(data == input$data_ventilador)
    
    ####################################################    
    y_quantidade=dados_mapa_rs_ventilador$equipamentos_ventilador2
    bins <- c(0, 1, 5, 10, 20, 100, 300, max(y_quantidade))
    #bins = c(1, 100)
    #pal <- colorBin("magma", domain = y, bins = bins)
    #pal <- colorBin("white", domain = y)
    pal <- colorBin("Blues", domain = y_quantidade, bins = bins)
    
    
    leaflet(dados_mapa_rs_ventilador) %>%
      addProviderTiles(providers$OpenStreetMap.Mapnik) %>%
      addCircleMarkers(data=dados_mapa_rs_filtro, lng=dados_mapa_rs_filtro$longitude, 
                       lat = dados_mapa_rs_filtro$latitude, radius=~(dados_mapa_rs_filtro$casos)*2, 
                       weight = 1, color = "red", fillOpacity = 300)%>%
      addLegend(colors=rep("red"), labels=c("casos confirmados"))%>%
      addPolygons(fillColor = ~pal(y_quantidade), 
                  weight = 1,
                  opacity = 0.6,
                  fillOpacity = 0.6,
                  color = "gray",
                  highlight = highlightOptions(
                    weight = 5,
                    color = "#666",
                    fillOpacity = 0.7,
                    bringToFront = TRUE),
                  label = sprintf("%s - numero de ventiladores  %s", dados_mapa_rs_ventilador$municipio, round(y_quantidade, 6)),
                  labelOptions = labelOptions(
                    style = list("font-weight" = "normal", padding = "6px 11px"),
                    textsize = "15px",
                    direction = "auto")) %>%
      addLegend(pal = pal, values = ~y_quantidade, opacity = 0.7, title = "Número de respirador/ventilador",
                labFormat = labelFormat(digits = 5),
                position = "bottomright") #%>%
    
  })
  
  output$tabela_ventilacao <- renderDT(respirador_ventilador)
  
}

shinyApp(ui, server)




---
title: "Mapa"
author: "Marcia Barbian"
date: "20/02/2020"
output: html_document
---




```{r, echo=FALSE, message=FALSE, warning=FALSE}

library(ggplot2)
#############################################################pacotes da leitura do mapa
library(tidyverse)
library(sf)
library(stringr)
library(readxl)
library(leaflet)
library(RColorBrewer)


banco_luzivan <- read_excel("dadosANOMALIAScMA_marcia_completo.xlsx", skip = 1)
banco_luzivan_novo = banco_luzivan %>% 
  gather(key = "aux", value = "valor", 3:50) %>%
  separate(col = aux, into = c("tipo", "ano"), sep = "_")  %>%
  spread(key= tipo, value = valor) %>%
  mutate(Cidade = str_to_lower(Cidade)) 

banco_luzivan_novo$ano = as.numeric(banco_luzivan_novo$ano)
banco_luzivan_novo$prevalencia=10000*banco_luzivan_novo$proporcao

banco_luzivan_novo_tabela= subset(banco_luzivan_novo, select = -proporcao )
banco_luzivan_novo_tabela$Cidade=banco_luzivan$Cidade
names(banco_luzivan_novo_tabela) = c("Codigo", "Cidade", "ano", "nascidos vivos com anomalias congenitas", 
                                     "nascidos vivos", "prevalencia de anomalias congenitas")


#data <- read.csv("data.csv")
#map <- readOGR("21MUE250GC_SIR.shp") 
#################################################
################ banco de dados para a parte espacial
mapa_ma_shp <- sf::st_read("21MUE250GC_SIR.shp", quiet = TRUE)

dplyr::glimpse(mapa_ma_shp)
mapa_ma_shp <- mapa_ma_shp %>% 
  mutate(municipio = str_to_lower(NM_MUNICIP)) # todas as cidades com letra minuscula
# leituras dados luzivan

banco <- banco_luzivan %>% 
  mutate(municipio = str_to_lower(Cidade)) # transforma as cidades em letra miniscula
banco$municipio = factor(banco$municipio)

banco_completo <- merge(banco, mapa_ma_shp, by.x = "municipio", by.y = "municipio") # une os dois bancos dado as cidades
dplyr::glimpse(banco_completo) # transforma em objeto espacial, n?o sei qual das duas funcoes usar
banco_completo = st_as_sf(banco_completo)
#transforma em um arquivo que o leaflet consegue ler!!!!
banco_completo_trasformado <- st_transform(banco_completo, "+init=epsg:4326")


```

# Grafico dos mapas do numero de casos de anomalias dos anos de 2001 e 2016


### Mapa 2001

```{r}
y=banco_completo_trasformado$proporcao_2001

y = y*10000
    bins <- c(0, .0001, 0.001, 0.005, 0.01, 130/10000, 290/10000)*10000 ### ver essa parte do intervalo de valores a serem considerados
    pal <- colorBin("YlOrRd", domain = y, bins = bins)
    
mapa_2001 = leaflet(banco_completo_trasformado) %>%
      addProviderTiles(providers$OpenStreetMap.Mapnik) %>%
      addPolygons(fillColor = ~pal(y), 
                  weight = 1.5,
                  opacity = 1,
                  fillOpacity = 0.7,
                  color = "gray",
                  highlight = highlightOptions(
                    weight = 5,
                    color = "#666",
                    fillOpacity = 0.7,
                    bringToFront = TRUE),
                  label = sprintf("%s - prevalencia %s", banco_completo_trasformado$Cidade, round(y, 6)),
                  labelOptions = labelOptions(
                    style = list("font-weight" = "normal", padding = "6px 11px"),
                    textsize = "15px",
                    direction = "auto")) %>%
      addLegend(pal = pal, values = ~y, opacity = 0.7, title = NULL,
                labFormat = labelFormat(digits = 5),
                position = "bottomright")%>%
  addScaleBar(position = 'bottomleft') 

```

### Mapa 2016

```{r}

y=banco_completo_trasformado$proporcao_2016

y = y*10000
    bins <- c(0, .0001, 0.001, 0.005, 0.01, 130/10000, 290/10000)*10000 ### ver essa parte do intervalo de valores a serem considerados
    pal <- colorBin("YlOrRd", domain = y, bins = bins)
  
mapa_2016 = leaflet(banco_completo_trasformado) %>%
      addProviderTiles(providers$OpenStreetMap.Mapnik) %>%
      addPolygons(fillColor = ~pal(y), 
                  weight = 1.5,
                  opacity = 1,
                  fillOpacity = 0.7,
                  color = "gray",
                  highlight = highlightOptions(
                    weight = 5,
                    color = "#666",
                    fillOpacity = 0.7,
                    bringToFront = TRUE),
                  label = sprintf("%s - prevalencia %s", banco_completo_trasformado$Cidade, round(y, 6)),
                  labelOptions = labelOptions(
                    style = list("font-weight" = "normal", padding = "6px 11px"),
                    textsize = "15px",
                    direction = "auto")) %>%
      addLegend(pal = pal, values = ~y, opacity = 0.7, title = NULL,
                labFormat = labelFormat(digits = 5),
                position = "bottomright")%>%
  addScaleBar(position = 'bottomleft') 



    
``` 

# Fazendo os mapas na mesma Figura

```{r}
#library(leaflet)
#install.packages(ggmap)
#library(ggmap)
#library(mapview)
#library(raster)
library(magrittr)
#install.packages("leafsync")
library(leafsync)

leafsync::latticeview(mapa_2001, mapa_2016)

leafsync::latticeview(mapa_2001, mapa_2016, ncol = 2, sync = list(c(1, 2)), sync.cursor = TRUE, no.initial.sync = FALSE)


```


# Mudando o ggplot da serie temporal para que não apareça a cor nem a grade no fundo

```{r}



aux_dados_grafico_serie = banco_completo_trasformado[124,1:51]
dados_grafico_serie=data.frame(aux_dados_grafico_serie[,c(4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49)+2])


theme_bw



ggplot2.customize(p,backgroundColor = "white",
                removePanelGrid = TRUE,removePanelBorder = TRUE,
                axisLine = c(0.5, "solid", "black"))


 serie2 <- banco_luzivan_novo %>%
      filter(Cidade %in% input$cidade1) 
    
    ggplotly(
      ggplot(serie2, aes(x = ano , y = prevalencia, colour = `Cidade`)) +
        geom_line() +
        geom_point(size = 2)+
        ylim(input$limite1[1],input$limite1[2])+
        labs(x = "Ano", y = "Prevalencia de anomalias congenitas")+
        theme(legend.position = "none")+
        theme_classic()
    )

```

## I de Moran 


```{r}
#install.packages("spdep")
library(spdep)


w <- poly2nb(banco_completo_trasformado$geometry, row.names=banco_completo_trasformado$municipio)
ww <-  nb2listw(w, style='B') #faz a matriz de pesos 0 ou 1


moran.mc(banco_completo_trasformado$proporcao_2001, ww, nsim=10000)
moran.mc(banco_completo_trasformado$proporcao_2002, ww, nsim=10000)
moran.mc(banco_completo_trasformado$proporcao_2003, ww, nsim=10000)
moran.mc(banco_completo_trasformado$proporcao_2004, ww, nsim=10000)
moran.mc(banco_completo_trasformado$proporcao_2005, ww, nsim=10000)
moran.mc(banco_completo_trasformado$proporcao_2006, ww, nsim=10000)
moran.mc(banco_completo_trasformado$proporcao_2007, ww, nsim=10000)
moran.mc(banco_completo_trasformado$proporcao_2008, ww, nsim=10000)
moran.mc(banco_completo_trasformado$proporcao_2009, ww, nsim=10000)
moran.mc(banco_completo_trasformado$proporcao_2010, ww, nsim=10000)
moran.mc(banco_completo_trasformado$proporcao_2011, ww, nsim=10000)
moran.mc(banco_completo_trasformado$proporcao_2012, ww, nsim=10000)
moran.mc(banco_completo_trasformado$proporcao_2013, ww, nsim=10000)
moran.mc(banco_completo_trasformado$proporcao_2014, ww, nsim=10000)
moran.mc(banco_completo_trasformado$proporcao_2015, ww, nsim=10000)
moran.mc(banco_completo_trasformado$proporcao_2016, ww, nsim=10000)



moran.test(banco$PRESC_TOTAL/banco$pop_tot_cens_2010, ww, randomisation=FALSE)

figura= moran.plot(banco$PRESC_TOTAL/banco$pop_tot_cens_2010, ww)
```

# Mapa tipo de anomalia

## Leitura do banco

```{r, message=TRUE, warning=TRUE, paged.print=TRUE}


library(ggplot2)
#############################################################pacotes da leitura do mapa
library(tidyverse)
library(sf)
library(stringr)
library(readxl)
library(leaflet)
library(RColorBrewer)


#setwd("C:/Users/mhbar/Google Drive/consultoria_luzivan/recomeco_aplicativos/app_analise_anomalias_congenitas_maranhao")


require(knitr)
opts_knit$set(root.dir = 'C:/Users/mhbar/Google Drive/consultoria_luzivan/recomeco_aplicativos/app_tipo_anomalia_congenita_maranhao')

setwd("C:/Users/mhbar/Google Drive/consultoria_luzivan/recomeco_aplicativos/app_tipo_anomalia_congenita_maranhao")
################tentando transformar o banco de dados
mapa_ma_shp <- sf::st_read("21MUE250GC_SIR.shp", quiet = TRUE)

dplyr::glimpse(mapa_ma_shp)
mapa_ma_shp <- mapa_ma_shp %>% 
  mutate(municipio = str_to_lower(NM_MUNICIP)) # todas as cidades com letra minuscula
############################################################################################################
############################### leituras dados luzivan
banco_luzivan <- read_excel("marcia_modificado.xlsx")

banco_luzivan = banco_luzivan %>%   #separa o cÃ³digo do nome da cidade
  separate("Município", into = c("Codigo", "Cidade"), sep = 7)

banco <- banco_luzivan %>% 
  mutate(municipio = str_to_lower(Cidade)) # transforma as cidades em letra miniscula
banco$municipio = factor(banco$municipio)

#banco = banco %>% # junta as anomalias em uma variavel
#  gather(c(3:17), key = "tipo_anomalia", value = "casos")


banco_completo <- merge(banco, mapa_ma_shp, by.x = "municipio", by.y = "municipio") # une os dois bancos dado as cidades
dplyr::glimpse(banco_completo) # transforma em objeto espacial, n?o sei qual das duas funcoes usar
banco_completo = st_as_sf(banco_completo)

banco_tabela=banco_luzivan
names(banco_tabela) = c("Codigo", "Municipio","Espinha bifida (Q05)",  "Outras malformacoes congenitas (Q80-Q89)",
                        "Aparelho circulatorio (Q20-Q28)", "Fenda labial e palatina (Q35-Q37)", 
                        "Ausencia atresia e estenose do intestino delgado (Q41)", "Aparelho digestivo (Q38-Q45)",
                        "Testiculo nao descido (Q53)", "Aparelho urinario (Q60-Q64)", 
                        "Deformidades congenitas do quadril (Q65)",
                        "Deformidades congenitas dos pes (Q66)", "Aparelho osteomuscular (Q65-Q79)",
                        "Sistema nervoso (Q00-Q07)", "Anomalias cromossomicas (Q90-Q99)",
                        "Hemangioma e linfangioma de qualquer localizacao (D18)", "Sem anomalia", 
                        "k")

banco_tabela2 = banco_tabela %>%
  gather(key = "tipo de anomalia", value = "n", 3:17) %>%
  mutate(prevalencia = (n/k)*10000)

names(banco_tabela2) = c("Codigo", "Municipio", "numero de nascidos vivos",
                         "tipo de anomalia", "numero de nascidos vivos com a anamalia", 
                         "prevalencia") 

###############################################################################################################
#############################transforma em um arquivo que o leaflet consegue ler!!!!
###########################################################
banco_completo_trasformado <- st_transform(banco_completo, "+init=epsg:4326")



```


## Fazendo o grafico 

## Aparelho osteomuscular


```{r}
y=banco_completo_trasformado$ostomuscular
y= 10000*(y/banco_completo_trasformado$numero_nascidos)
    #pal = colorQuantile("YlOrRd", domain = y, probs = seq(0, 1, length.out = 5))

    pal <- colorBin("YlOrRd", domain = y, bins = 6)
    
mapa_ostomuscular = leaflet(banco_completo_trasformado) %>%
      #setView(lng =100, lat = 100, zoom = 08)%>%
      addProviderTiles(providers$OpenStreetMap.Mapnik) %>%
      addPolygons(fillColor = ~pal(y), 
                  weight = 1.5,
                  opacity = 1,
                  fillOpacity = 0.7,
                  color = "gray",
                  highlight = highlightOptions(
                    weight = 5,
                    color = "#666",
                    fillOpacity = 0.7,
                    bringToFront = TRUE),
                  label = sprintf("%s - prevalencia %s", banco_completo_trasformado$Cidade, round(y, 6)),
                  labelOptions = labelOptions(
                    style = list("font-weight" = "normal", padding = "6px 11px"),
                    textsize = "15px",
                    direction = "auto")) %>%
      addLegend(pal = pal, values = ~y, opacity = 0.7, title = NULL,
                labFormat = labelFormat(digits = 5),
                position = "bottomright")%>%
  addScaleBar(position = 'bottomleft') 


```

## Sistema Nervoso Central

```{r}
y=banco_completo_trasformado$outras_ma_formacoes
y= 10000*(y/banco_completo_trasformado$numero_nascidos)
    #pal = colorQuantile("YlOrRd", domain = y, probs = seq(0, 1, length.out = 5))
    pal <- colorBin("YlOrRd", domain = y, bins = 6)


    #pal <- colorBin("YlOrRd", domain = y,  bins=quantile.interval)
    
mapa_sistema_nervoso=    leaflet(banco_completo_trasformado) %>%
      #setView(lng =100, lat = 100, zoom = 08)%>%
      addProviderTiles(providers$OpenStreetMap.Mapnik) %>%
      addPolygons(fillColor = ~pal(y), 
                  weight = 1.5,
                  opacity = 1,
                  fillOpacity = 0.7,
                  color = "gray",
                  highlight = highlightOptions(
                    weight = 5,
                    color = "#666",
                    fillOpacity = 0.7,
                    bringToFront = TRUE),
                  label = sprintf("%s - prevalencia %s", banco_completo_trasformado$Cidade, round(y, 6)),
                  labelOptions = labelOptions(
                    style = list("font-weight" = "normal", padding = "6px 11px"),
                    textsize = "15px",
                    direction = "auto")) %>%
      addLegend(pal = pal, values = ~y, opacity = 0.7, title = NULL,
                labFormat = labelFormat(digits = 5),
                position = "bottomright") %>%
      addScaleBar(position = 'bottomleft') 


```


### Fazendo os mapas na mesma figura



```{r}
#library(leaflet)
#install.packages(ggmap)
#library(ggmap)
#library(mapview)
#library(raster)
library(magrittr)
#install.packages("leafsync")
library(leafsync)

leafsync::latticeview(mapa_ostomuscular, mapa_sistema_nervoso)

leafsync::latticeview(mapa_ostomuscular, mapa_sistema_nervoso, ncol = 2, sync = list(c(1, 2)), sync.cursor = TRUE, no.initial.sync = FALSE)


```





# Fazendo o grafico com o mapview para acrescentar a escala

```{r}
library(mapview)

a=    leaflet(banco_completo_trasformado) %>%
      addProviderTiles(providers$OpenStreetMap.Mapnik) %>%
      addPolygons(fillColor = ~pal(y), 
                  weight = 1.5,
                  opacity = 1,
                  fillOpacity = 0.7,
                  color = "gray",
                  highlight = highlightOptions(
                    weight = 5,
                    color = "#666",
                    fillOpacity = 0.7,
                    bringToFront = TRUE),
                  label = sprintf("%s - prevalencia %s", banco_completo_trasformado$Cidade, round(y, 6)),
                  labelOptions = labelOptions(
                    style = list("font-weight" = "normal", padding = "6px 11px"),
                    textsize = "15px",
                    direction = "auto")) %>%
      addLegend(pal = pal, values = ~y, opacity = 0.7, title = NULL,
                labFormat = labelFormat(digits = 5),
                position = "bottomright")%>%
  addScaleBar(position = 'bottomleft') 


img <- system.file("img", "C:/Users/mhbar/Google Drive/consultoria_luzivan/figuras_dos_mapas_versao_final_artigo/norte.png", package="png")

leaflet() %>% addTiles() %>% addLogo(img, src = "local", alpha = 0.3)


  addLogo(a, img,
        src = "local",  
        alpha = 0.3,
        position = "topright",
        offset.x = 5,
        offset.y = 5,
        width = 50,
        height = 50)

#mapview(a)
#m2001 <- mapview(banco_completo_trasformado, zcol = "proporcao_2001")



#library(leaflet)
#install.packages(ggmap)
#library(ggmap)
#library(mapview)
#library(raster)
library(magrittr)
install.packages("leafsync")
library(leafsync)


latticeView(a, a, ncol = 2, sync = list(c(1, 2)), sync.cursor = TRUE, no.initial.sync = FALSE)
# Or:
sync(map1, map2)
#m2001


addLogo(m, "https://jeroenooms.github.io/images/banana.gif",
        position = "bottomleft",
        offset.x = 5,
        offset.y = 40,
        width = 100,
        height = 100)

```   
   
   


# Gráfico

```{r}

y=banco$PRESC_TOTAL/banco$pop_tot_cens_2010
bins <- c(0, .0001, 0.0002, 0.0004, 0.0005, 1)
pal <- colorBin("YlOrRd", domain = y, bins = bins)
#  

leaflet(banco) %>%
  addProviderTiles(providers$OpenStreetMap.Mapnik) %>%
  addPolygons(fillColor = ~pal(y), 
              weight = 1.5,
              opacity = 1,
              fillOpacity = 0.7,
              color = "gray",
              highlight = highlightOptions(
                weight = 5,
                color = "#666",
                fillOpacity = 0.7,
                bringToFront = TRUE),
              label = sprintf("%s - prop %s", banco$CIDADE, round(y, 6)),
              labelOptions = labelOptions(
                style = list("font-weight" = "normal", padding = "6px 11px"),
                textsize = "15px",
                direction = "auto")) %>%
  addLegend(pal = pal, values = ~y, opacity = 0.7, title = NULL,
            labFormat = labelFormat(digits = 5),
            position = "bottomright")


teste_mapview= leaflet(banco) %>%
  addProviderTiles(providers$OpenStreetMap.Mapnik) %>%
  addPolygons(fillColor = ~pal(y), 
              weight = 1.5,
              opacity = 1,
              fillOpacity = 0.7,
              color = "gray",
              highlight = highlightOptions(
                weight = 5,
                color = "#666",
                fillOpacity = 0.7,
                bringToFront = TRUE),
              label = sprintf("%s - prop %s", banco$CIDADE, round(y, 6)),
              labelOptions = labelOptions(
                style = list("font-weight" = "normal", padding = "6px 11px"),
                textsize = "15px",
                direction = "auto")) %>%
  addLegend(pal = pal, values = ~y, opacity = 0.7, title = NULL,
            labFormat = labelFormat(digits = 5),
            position = "bottomright")


install.packages("mapview")
library(mapview)
library(leafem)



m <- mapview(teste_mapview)

m=mapview(banco)
mapview(banco, zcol = "PRESC_TOTAL")
```

Tem alguns _NA_ no banco, pode ser de população nao informada ou do número de casos não informado, 
por isso aparece alguns municípios sem nenhuma cor. Os dois municípios estão especificados abaixo:

Tem outra cidade sem cor que eu não sei especificar o por que, precisaria perder mais tempo com  o banco de dados pra descobrir o que aconteceu.

```{r, echo=FALSE, message=FALSE, warning=FALSE}

aux=c(which(is.na(banco$PRESC_TOTAL)), which(is.na(banco$pop_tot_cens_2010)))
aux
banco[aux,1]

```




## Descritiva

Também fiz uns gráficos simples das duas variáveis:


```{r, echo=FALSE, message=FALSE, warning=FALSE}

knitr::kable(summary(data.frame(banco$PRESC_TOTAL,banco$pop_tot_cens_2010)))


banco= banco[-aux, ]

banco2=data.frame(PRESC_TOTAL = banco$PRESC_TOTAL, pop_tot_cens_2010=
                    banco$pop_tot_cens_2010, municipio=banco$municipio)


ggplot(banco2) +
  geom_density(aes(x= PRESC_TOTAL ))

ggplot(banco2) +
  geom_density(aes(x= pop_tot_cens_2010 ))




library(plotly)

ggplotly(
  ggplot(banco2, aes(x= pop_tot_cens_2010, y = PRESC_TOTAL, label = municipio)) +
        geom_point(color= "tomato") 
  )

```


# Calculando o indice i de moran

```{r}
#install.packages("spdep")
library(spdep)


w <- poly2nb(banco$geometry, row.names=banco$municipio)
ww <-  nb2listw(w, style='B') #faz a matriz de pesos 0 ou 1


moran.mc(banco$PRESC_TOTAL/banco$pop_tot_cens_2010, ww, nsim=10000)

moran.test(banco$PRESC_TOTAL/banco$pop_tot_cens_2010, ww, randomisation=FALSE)

figura= moran.plot(banco$PRESC_TOTAL/banco$pop_tot_cens_2010, ww)
```

